// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Week4.Repository;

#nullable disable

namespace Week4.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231222154848_no2")]
    partial class no2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("System.Collections.Generic.List<string>", b =>
                {
                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.ToTable("List<string>");
                });

            modelBuilder.Entity("Week4.Core.Models.Activities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Effect")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityType = 0,
                            Description = "Sabah yürüyüşü",
                            Effect = 0,
                            EndTime = new DateTime(2021, 10, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            PetId = 1,
                            StartTime = new DateTime(2021, 10, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 2
                        },
                        new
                        {
                            Id = 2,
                            ActivityType = 1,
                            Description = "Bahçede oyun oynama",
                            Effect = 1,
                            EndTime = new DateTime(2021, 10, 2, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            PetId = 2,
                            StartTime = new DateTime(2021, 10, 2, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityType = 2,
                            Description = "Temel itaat eğitimi",
                            Effect = 3,
                            EndTime = new DateTime(2021, 10, 5, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            PetId = 1,
                            StartTime = new DateTime(2021, 10, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Week4.Core.Models.Foods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EnergyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsContainsGluten")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrganic")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NutritionalValues")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<decimal>("PortionSize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServingFrequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Suitability")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnergyValue = 350,
                            IsContainsGluten = false,
                            IsOrganic = true,
                            Name = "Premium Kuru Mama",
                            NutritionalValues = "Yüksek protein, düşük yağ",
                            PetId = 1,
                            PortionSize = 100m,
                            ServingFrequency = "Günde iki kez",
                            Suitability = "{\"Köpek\":\"Yetişkin\"}",
                            Type = "kuru mama"
                        },
                        new
                        {
                            Id = 2,
                            EnergyValue = 200,
                            IsContainsGluten = true,
                            IsOrganic = true,
                            Name = "Organik Yaş Mama",
                            NutritionalValues = "Organik tavuk ve sebze",
                            PetId = 2,
                            PortionSize = 150m,
                            ServingFrequency = "Günde üç kez",
                            Suitability = "{\"Kedi\":\"Yetişkin\"}",
                            Type = "yaş mama"
                        },
                        new
                        {
                            Id = 3,
                            EnergyValue = 100,
                            IsContainsGluten = false,
                            IsOrganic = false,
                            Name = "Sağlıklı Ödül Maması",
                            NutritionalValues = "Doğal malzemeler, ilave şeker içermez",
                            PetId = 3,
                            PortionSize = 50m,
                            ServingFrequency = "Eğitim sırasında",
                            Suitability = "{\"Köpek\":\"Her yaştan\",\"Kedi\":\"Her yaştan\"}",
                            Type = "ödül maması"
                        });
                });

            modelBuilder.Entity("Week4.Core.Models.HealthStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BehaviorChanges")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CheckupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChronicConditions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PetId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TreatmentNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("VaccinationRecord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VaccinationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("HealthStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "Polen",
                            BehaviorChanges = "Daha az aktif",
                            CheckupDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChronicConditions = "Astım",
                            Diagnosis = "Bronşit",
                            Medications = "Bronşit ilacı",
                            PetId = 1,
                            Symptoms = "Öksürük, halsizlik",
                            TreatmentNotes = "İlaç ve dinlenme",
                            VaccinationRecord = "Karma,Kuduz",
                            VaccinationStatus = 2
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "Yok",
                            BehaviorChanges = "Daha az yeme",
                            CheckupDate = new DateTime(2021, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChronicConditions = "Şeker hastalığı",
                            Diagnosis = "Diyabet",
                            Medications = "İnsülin",
                            PetId = 2,
                            Symptoms = "İştahsızlık, kilo kaybı",
                            TreatmentNotes = "Diyet ve insülin",
                            VaccinationRecord = "Karma",
                            VaccinationStatus = 1
                        },
                        new
                        {
                            Id = 3,
                            Allergies = "Süt ürünleri",
                            BehaviorChanges = "Huzursuzluk",
                            CheckupDate = new DateTime(2021, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ChronicConditions = "Mide rahatsızlığı",
                            Diagnosis = "Gastrit",
                            Medications = "Mide koruyucu",
                            PetId = 3,
                            Symptoms = "Kusma, ishal",
                            TreatmentNotes = "Diyet ve mide koruyucu",
                            VaccinationRecord = "",
                            VaccinationStatus = 3
                        });
                });

            modelBuilder.Entity("Week4.Core.Models.Pet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 5,
                            Breed = "Golden Retriever",
                            Gender = "Erkek",
                            Name = "Max",
                            RegistrationDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Köpek",
                            UserId = 1,
                            Weight = 30.0m
                        },
                        new
                        {
                            Id = 2,
                            Age = 3,
                            Breed = "Siamese",
                            Gender = "Dişi",
                            Name = "Mia",
                            RegistrationDate = new DateTime(2021, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Kedi",
                            UserId = 1,
                            Weight = 5.0m
                        },
                        new
                        {
                            Id = 3,
                            Age = 2,
                            Breed = "Beagle",
                            Gender = "Erkek",
                            Name = "Charlie",
                            RegistrationDate = new DateTime(2021, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Species = "Köpek",
                            UserId = 2,
                            Weight = 10.0m
                        });
                });

            modelBuilder.Entity("Week4.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 30,
                            Email = "johndoe@example.com",
                            Gender = "Male",
                            Name = "John Doe",
                            Password = "johndoe123",
                            PhoneNumber = "1234567890",
                            RegistrationDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            Age = 28,
                            Email = "janedoe@example.com",
                            Gender = "Female",
                            Name = "Jane Doe",
                            Password = "janedoe123",
                            PhoneNumber = "0987654321",
                            RegistrationDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "janedoe"
                        },
                        new
                        {
                            Id = 3,
                            Age = 35,
                            Email = "chrissmith@example.com",
                            Gender = "Male",
                            Name = "Chris Smith",
                            Password = "chrissmith123",
                            PhoneNumber = "1122334455",
                            RegistrationDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "chrissmith"
                        });
                });

            modelBuilder.Entity("Week4.Core.Models.Activities", b =>
                {
                    b.HasOne("Week4.Core.Models.Pet", "Pet")
                        .WithMany("Activities")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Week4.Core.Models.Foods", b =>
                {
                    b.HasOne("Week4.Core.Models.Pet", "Pet")
                        .WithMany("Foods")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Week4.Core.Models.HealthStatus", b =>
                {
                    b.HasOne("Week4.Core.Models.Pet", "Pet")
                        .WithMany("Status")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("Week4.Core.Models.Pet", b =>
                {
                    b.HasOne("Week4.Core.Models.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Week4.Core.Models.Pet", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Foods");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Week4.Core.Models.User", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
